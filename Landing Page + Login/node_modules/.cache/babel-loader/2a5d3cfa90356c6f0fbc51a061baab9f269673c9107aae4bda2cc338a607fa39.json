{"ast":null,"code":"import { auth, database } from './firebase.js';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { child, get, push, query, ref, remove, set, update } from \"firebase/database\";\nconst dbRef = ref(database);\nclass DataServices {\n  signUp(email, password, confirmPassword) {\n    // , callback) {\n    return createUserWithEmailAndPassword(auth, email, password, confirmPassword);\n    // .then((cred) => {\n    //   console.log(cred.user.uid + ': user has successfully logged in');\n    //   callback('signUp successfully');\n    // }).catch((error) => {\n    //   console.log(error);\n    //   callback(error)\n    // });\n  }\n\n  login(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  logOut() {\n    return signOut(auth);\n    // .then(() => {\n    //   console.log('Sign-out successful.');\n    //   callback('logout successfully');\n    // }).catch((error) => {\n    //   console.log(error);\n    //   callback(error);\n    // });\n  }\n\n  // createUser(uid, fn, ln) {\n  //   update(ref(database, `users/${uid}`), {\n  //     firstName: fn,\n  //     lastName: ln\n  //   });\n  // }\n\n  //courses CRUD\n  getCourseList(uid) {\n    const courseListQuery = query(ref(database, `users/${uid}`));\n    return get(courseListQuery).then(result => {\n      return result.val();\n    });\n    // result.then(result => {\n    //   const list = result.val();\n    //   console.log(list);\n    // }).catch(error => {\n    //   console.log(error);\n    // });\n    // const endResult = result.val();\n    // console.log(\"result:\"+endResult);\n  }\n\n  createCourse(uid, courseObj) {\n    //push to create new id under given path. and then use child method with dbref to add a child under newly created key.\n    return push(child(dbRef, `users/${uid}`), courseObj);\n    // .then(res => res.val());\n  }\n\n  getCourseById(uid, courseId) {\n    const courseIdQuery = query(ref(database, `users/${uid}/${courseId}`));\n    return get(courseIdQuery).then(res => res.val());\n    // .then(result => {\n    //   const course = result.val();\n    //   console.log(course);\n    // }).catch(error => {\n    //   console.log(error);\n    // });\n  }\n\n  updateCourseById(uid, courseId, courseObj) {\n    return update(ref(database, `users/${uid}/${courseId}`), courseObj);\n  }\n  deleteCourseById(uid, courseId) {\n    return remove(ref(database, `users/${uid}/${courseId}`));\n  }\n  deleteAllCourses(uid) {\n    return remove(ref(database, `users/${uid}`));\n  }\n  createGradeItem(uid, courseId, GradeItemsObj) {\n    return push(child(dbRef, `users/${uid}/${courseId}/Grade Items`), GradeItemsObj).then(res => res.val());\n  }\n  updateGradeItem(uid, courseId, GradeItemId, GradeItemsObj) {\n    return update(ref(database, `users/${uid}/${courseId}/Grade Items/${GradeItemId}`), GradeItemsObj);\n  }\n  resetGradeItem(uid, courseId, GradeItemId, GradeItemsObj) {\n    return set(ref(database, `users/${uid}/${courseId}/Grade Items/${GradeItemId}`), GradeItemsObj);\n  }\n  deleteGradeItem(uid, courseId, GradeItemId) {\n    return remove(ref(database, `users/${uid}/${courseId}/Grade Items/${GradeItemId}`));\n  }\n}\nexport default new DataServices();","map":{"version":3,"names":["auth","database","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","child","get","push","query","ref","remove","set","update","dbRef","DataServices","signUp","email","password","confirmPassword","login","logOut","getCourseList","uid","courseListQuery","then","result","val","createCourse","courseObj","getCourseById","courseId","courseIdQuery","res","updateCourseById","deleteCourseById","deleteAllCourses","createGradeItem","GradeItemsObj","updateGradeItem","GradeItemId","resetGradeItem","deleteGradeItem"],"sources":["/Users/nageebdamani/gradey-website/src/DataServices.js"],"sourcesContent":["import { auth, database } from './firebase.js';\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n} from \"firebase/auth\";\nimport { child, get, push, query, ref, remove, set, update } from \"firebase/database\";\nconst dbRef = ref(database);\n\nclass DataServices {\n  signUp(email, password, confirmPassword) {\n  // , callback) {\n    return createUserWithEmailAndPassword(auth, email, password, confirmPassword);\n    // .then((cred) => {\n    //   console.log(cred.user.uid + ': user has successfully logged in');\n    //   callback('signUp successfully');\n    // }).catch((error) => {\n    //   console.log(error);\n    //   callback(error)\n    // });\n  }\n\n  login(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n\n  logOut() {\n    return signOut(auth);\n    // .then(() => {\n    //   console.log('Sign-out successful.');\n    //   callback('logout successfully');\n    // }).catch((error) => {\n    //   console.log(error);\n    //   callback(error);\n    // });\n  }\n\n\n  // createUser(uid, fn, ln) {\n  //   update(ref(database, `users/${uid}`), {\n  //     firstName: fn,\n  //     lastName: ln\n  //   });\n  // }\n\n\n  //courses CRUD\n  getCourseList(uid) {\n    const courseListQuery = query(ref(database, `users/${uid}`));\n    return get(courseListQuery).then((result) => {\n      return result.val();\n    });\n    // result.then(result => {\n    //   const list = result.val();\n    //   console.log(list);\n    // }).catch(error => {\n    //   console.log(error);\n    // });\n    // const endResult = result.val();\n    // console.log(\"result:\"+endResult);\n   \n  }\n\n  createCourse(uid, courseObj) {\n    //push to create new id under given path. and then use child method with dbref to add a child under newly created key.\n    return push(child(dbRef, `users/${uid}`), courseObj)\n    // .then(res => res.val());\n  }\n\n  getCourseById(uid, courseId) {\n    const courseIdQuery = query(ref(database, `users/${uid}/${courseId}`));\n    return  get(courseIdQuery).then(res => res.val());\n    // .then(result => {\n    //   const course = result.val();\n    //   console.log(course);\n    // }).catch(error => {\n    //   console.log(error);\n    // });\n  }\n\n  updateCourseById(uid, courseId, courseObj) {\n    return update(ref(database, `users/${uid}/${courseId}`), courseObj);\n  }\n\n  deleteCourseById(uid, courseId) {\n    return remove(ref(database, `users/${uid}/${courseId}`));\n  }\n\n  deleteAllCourses(uid) {\n    return remove(ref(database, `users/${uid}`));\n  }\n\n  createGradeItem(uid, courseId, GradeItemsObj) {\n    return push(child(dbRef, `users/${uid}/${courseId}/Grade Items`), GradeItemsObj).then(res => res.val());\n  }\n\n  updateGradeItem(uid,courseId, GradeItemId, GradeItemsObj){\n    return update(ref(database, `users/${uid}/${courseId}/Grade Items/${GradeItemId}`), GradeItemsObj);\n  }\n\n  resetGradeItem(uid,courseId, GradeItemId, GradeItemsObj){\n    return set(ref(database, `users/${uid}/${courseId}/Grade Items/${GradeItemId}`), GradeItemsObj);\n  }\n\n  deleteGradeItem(uid, courseId, GradeItemId) {\n    return remove(ref(database, `users/${uid}/${courseId}/Grade Items/${GradeItemId}`));\n  }\n\n}\n\nexport default new DataServices();\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}