{"ast":null,"code":"import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.13.2\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n  toString() {\n    return this.domStorage_.toString();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n  remove(key) {\n    delete this.cache_[key];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function () {\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nconst log = function () {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nconst logWrapper = function (prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n    log(prefix, ...varArgs);\n  };\n};\nconst error = function () {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...arguments);\n  logClient.error(message);\n};\nconst fatal = function () {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...arguments)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\nconst warn = function () {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n  addTokenChangeListener(listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n  removeTokenChangeListener(listener) {}\n  notifyForInvalidToken() {}\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n */\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly) {\n    let nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n  get host() {\n    return this._host;\n  }\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n  toString() {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n */\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n  incrementCounter(name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  }\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    var _this = this;\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n        const [command, arg1, arg2, arg3, arg4] = args;\n        _this.incrementIncomingBytes_(args);\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n        _this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            _this.myPacketOrderer.closeAfter(arg1, () => {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        const [pN, data] = args;\n        _this.incrementIncomingBytes_(args);\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\nclass WebSocketConnection {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      let options;\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n  start() {}\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n  static isAvailable() {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n  appendFrame_(data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\nclass TransportManager {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  /**\r\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n   * TransportManager has already set up transports_\r\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2 /* DISCONNECTED */) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n  onDataMessage_(message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n  onConnectionLost_(everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  }\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  }\n  sendData_(data) {\n    if (this.state_ !== 1 /* CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  close() {\n    if (this.state_ !== 2 /* DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n  refreshAppCheckToken(token) {}\n  onDisconnectPut(pathString, data, onComplete) {}\n  onDisconnectMerge(pathString, data, onComplete) {}\n  onDisconnectCancel(pathString, onComplete) {}\n  reportStats(stats) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n  trigger(eventType) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n      for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n        varArgs[_key6 - 1] = arguments[_key6];\n      }\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n  currentlyOnline() {\n    return this.online_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  toString() {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  }\n}\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\nfunction pathSlice(path) {\n  let begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nclass PersistentConnection extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  }\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[/*data*/'d'];\n      const status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  }\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  }\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  }\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest( /*stats*/'s', request, result => {\n        const status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */'d'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  }\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\r\n   * Sends client stats for first connection\r\n   */\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.key';\n  }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_) {\n    let resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    let node = this.nodeStack_.pop();\n    let result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nclass LLRBNode {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  minKey() {\n    return this.min_().key;\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    let n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n  isRed_() {\n    return this.color;\n  }\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n  fixUp_() {\n    let n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n  moveRedRight_() {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n  isRed_() {\n    return false;\n  }\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_) {\n    let root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  get(key) {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n  getPredecessorKey(key) {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nclass LeafNode {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  constructor(value_) {\n    let priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n  forEachChild(index, action) {\n    return false;\n  }\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n  getValue() {\n    return this.value_;\n  }\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex() {\n    return this;\n  }\n  isIndexed() {\n    return true;\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.priority';\n  }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\nclass ChildrenNode {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    const obj = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n  getPriority() {\n    return this;\n  }\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  isEmpty() {\n    return false;\n  }\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\nfunction nodeFromJSON(json) {\n  let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return true;\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.value';\n  }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst MIN_PUSH_CHAR = '-';\nconst MAX_PUSH_CHAR = 'z';\nconst MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\nconst successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n  let i = next.length - 1;\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n};\n// `key` is assumed to be non-empty.\nconst predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* VALUE */,\n    snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* CHILD_ADDED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* CHILD_REMOVED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* CHILD_CHANGED */,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* CHILD_MOVED */,\n    snapshotNode,\n    childName\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes() {\n    return false;\n  }\n  getIndexedFilter() {\n    return this;\n  }\n  getIndex() {\n    return this.index_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  getStartPost() {\n    return this.startPost_;\n  }\n  getEndPost() {\n    return this.endPost_;\n  }\n  matches(node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\nclass LimitedFilter {\n  constructor(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a, b) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex() {\n    return this.index_;\n  }\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  hasStart() {\n    return this.startSet_;\n  }\n  hasStartAfter() {\n    return this.startAfterSet_;\n  }\n  hasEndBefore() {\n    return this.endBeforeSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let childKey;\n  let params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\" /* START_AT */] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\" /* END_AT */] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* LIMIT */] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\n      }\n    }\n\n    obj[\"vf\" /* VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n    this.listens_ = {};\n  }\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    const pathString = query._path.toString();\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n  refreshAuthToken(token) {\n    // no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n  restRequest_(pathString) {\n    let queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken( /*forceRefresh=*/false), this.appCheckTokenProvider_.getToken( /*forceRefresh=*/false)]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Merge {\n  constructor( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n  isFiltered() {\n    return this.filtered_;\n  }\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n  getNode() {\n    return this.node_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\" /* CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nclass ImmutableTree {\n  constructor(value) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n    this.value = value;\n    this.children = children;\n  }\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\" /* CHILD_ADDED */ || type === \"child_changed\" /* CHILD_CHANGED */ || type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === \"child_added\" /* CHILD_ADDED */ && oldType === \"child_removed\" /* CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n}\n/**\r\n * Singleton instance.\r\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_) {\n    let optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  get query() {\n    return this.query_;\n  }\n}\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n}\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  let revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault = -1 !== removed.findIndex(query => {\n      return query._queryParams.loadsAllData();\n    });\n    const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\n        }\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag = null;\n        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n      } else {\n        removed.forEach(queryToRemove => {\n          const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\r\n * This function was added to support non-listener queries,\r\n * specifically for use in repoGetValue. It sets up all the same\r\n * local cache data-structures (SyncPoint + View) that are\r\n * needed for listeners without installing an event registration.\r\n * If `query` is not `loadsAllData`, it will also provision a tag for\r\n * the query so that query results can be merged into the sync\r\n * tree using existing logic for tagged listener queries.\r\n *\r\n * @param syncTree - Synctree to add the query to.\r\n * @param query - Query to register\r\n * @returns tag as a string if query is not a default query, null if query is not.\r\n */\nfunction syncTreeRegisterQuery(syncTree, query) {\n  const {\n    syncPoint,\n    serverCache,\n    writesCache,\n    serverCacheComplete\n  } = syncTreeRegisterSyncPoint(query, syncTree);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  if (!query._queryParams.loadsAllData()) {\n    return syncTreeTagForQuery_(syncTree, query);\n  }\n  return null;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Creates a new syncpoint for a query and creates a tag if the view doesn't exist.\r\n * Extracted from addEventRegistration to allow `repoGetValue` to properly set up the SyncTree\r\n * without actually listening on a query.\r\n */\nfunction syncTreeRegisterSyncPoint(query, syncTree) {\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  return {\n    syncPoint,\n    writesCache,\n    serverCache,\n    serverCacheComplete,\n    foundAncestorDefaultView,\n    viewAlreadyExists\n  };\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  const {\n    syncPoint,\n    serverCache,\n    writesCache,\n    serverCacheComplete,\n    viewAlreadyExists,\n    foundAncestorDefaultView\n  } = syncTreeRegisterSyncPoint(query, syncTree);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\nfunction syncTreeTagForQuery_(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n  node() {\n    return this.node_;\n  }\n}\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      children: {},\n      childCount: 0\n    };\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n    this.recursionDepth_ = 0;\n  }\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n}\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\nfunction repoGetValue(repo, query) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    // if this is a filtered query, then overwrite at path\n    if (query._queryParams.loadsAllData()) {\n      syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      // Simulate `syncTreeAddEventRegistration` without events/listener setup.\n      // We do this (along with the syncTreeRemoveEventRegistration` below) so that\n      // `repoGetValue` results have the same cache effects as initial listener(s)\n      // updates.\n      const tag = syncTreeRegisterQuery(repo.serverSyncTree_, query);\n      syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n      // Call `syncTreeRemoveEventRegistration` with a null event registration, since there is none.\n      // Note: The below code essentially unregisters the query and cleans up any views/syncpoints temporarily created above.\n    }\n\n    const cancels = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, null);\n    if (cancels.length > 0) {\n      repoLog(repo, 'unexpected cancel events in repoGetValue');\n    }\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), (status, errorReason) => {\n    const success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoLog(repo) {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n  log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        const error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* RUN */;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\nfunction repoSendReadyTransactions(repo) {\n  let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0 /* RUN */);\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* SENT */;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2 /* COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0 /* RUN */;\n  });\n\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\nfunction decodeQuery(queryString) {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  getPath() {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType() {\n    return this.eventType;\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n}\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  getPath() {\n    return this.path;\n  }\n  getEventType() {\n    return 'cancel';\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n  get root() {\n    let ref = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    const childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val() {\n    return this._node.val();\n  }\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    const index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  }\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nclass QueryConstraint {}\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAt() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\nfunction query(query) {\n  let queryImpl = getModularInstance(query);\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\nfunction getDatabase() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let url = arguments.length > 1 ? arguments[1] : undefined;\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\nfunction connectDatabaseEmulator(db, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('database', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor( /** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\r\n * @internal\r\n */\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","varArgs","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appCheckProvider","appName_","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","each","StatsCollection","incrementCounter","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","creatorFunction","PacketReceiver","onMessage_","closeAfter","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","handleResponse","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","bytesSent","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","options","device","headers","platform","env","process","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","isInMemoryStorage","appendFrame_","frames","totalFrames","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","keepaliveTimer","clearInterval","setInterval","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","pendingDataMessages","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","trigger","eventType","listeners_","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","isMobileCordova","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pieceNum","pieces_","pathOrString","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","childPathObj","childPieces","pathIsEmpty","outerPath","innerPath","outer","inner","newRelativePath","left","right","leftKeys","rightKeys","cmp","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","undefined","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","forceTokenRefresh_","all","interrupt","interruptReasons_","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","securityDebugCallback_","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","MAX_NODE","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","lazyHash_","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexSet_","indexes_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","NAME_COMPARATOR","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","NAME_ONLY_COMPARATOR","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","changeChildRemoved","changeChildAdded","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","hasStartAfter","startAfterSet_","hasEndBefore","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","hasLimit","limitSet_","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","newLimit","newParams","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listenId","thisListen","listens_","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","getNode","rootNode_","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","tree","sparseSnapshotTreeForget","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","server_","statsListener_","collection","reportStats_","reportedStats","haveStatsToReport","statsToReport_","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","changeChildMoved","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","newViewCache","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","pathChild","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","shadowingNode","compoundWriteIsEmpty","applySubtreeWrite","writeTree","priorityWrite","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","record","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","pathContains","writeTreeResetTree_","compoundWriteRemoveWrite","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","compoundWriteChildCompoundWrite","compoundWriteHasCompleteWrite","layeredCache","compoundWriteApply","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","ChildChangeAccumulator","oldChange","changeMap","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","writeTreeRefCalcIndexedSlice","newViewProcessor","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","writeTreeRefShadowingWrite","completeEventChildren","writeTreeRefCalcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","cache","viewIsEmpty","eventRegistrations_","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewProcessorAssertIndexed","viewGenerateEventsForChanges_","initialChanges","eventNode","referenceConstructor","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","viewAddEventRegistration","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","viewGetCompleteServerCache","syncPointGetCompleteView","syncPointViewForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","writeTreeGetWrite","needToReevaluate","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","syncPointTree_","syncPointViewExistsForQuery","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeRegisterSyncPoint","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","foundAncestorDefaultView","pathToSyncPoint","sp","syncPointGetCompleteServerCache","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","writeTreeChildWrites","syncTreeAddEventRegistration","syncPointAddEventRegistration","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","writeTreeRefChild","syncTreeApplyListenComplete","errorForServerCode","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","pathObj","treeGetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachDescendant","includeSelf","childrenFirst","treeForEachChild","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","validationPathPush","validateFirebaseMergePaths","mergePaths","curPath","pathCompare","prevPath","validateFirebaseMergeDataArg","validatePriority","validateKey","argumentName","validateRootPathString","validatePathString","validateUrl","parsedUrl","EventQueue","eventQueue","eventDataList","currList","getPath","pathEquals","eventLists_","eventQueueRaiseEventsAtPath","eventQueueQueueEvents","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoOnServerInfoUpdate","statsReporter_","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","nextWriteId_","cached","syncTreeGetServerValue","syncTreeRegisterQuery","cancels","repoLog","err","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","treeSubTree","transactionQueueTree_","nodeQueue","treeSetValue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","cancelCallback","snapshotCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","validateWritablePath","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","parsedURL","thennablePushRef","pushRef","repoGetValue","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","QueryEndBeforeConstraint","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","QueryLimitToFirstConstraint","_limit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","parsedPath","queryParamsOrderBy","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","queryImpl","queryConstraints","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","getApp","_getProvider","identifier","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","enableLoggingImpl","registerDatabase","variant","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","repoStartTransaction","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/version.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/storage/storage.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/util.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/AuthTokenProvider.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/realtime/Constants.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/RepoInfo.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/stats/StatsCollection.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/stats/StatsManager.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/realtime/TransportManager.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/realtime/Connection.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/ServerActions.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/EventEmitter.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/Path.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/PersistentConnection.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/Node.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/indexes/Index.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/SortedMap.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/comparators.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/snap.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/LeafNode.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/childSet.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/IndexMap.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/NextPushId.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/Change.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/QueryParams.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/SnapshotHolder.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/stats/StatsListener.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/stats/StatsReporter.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/operation/Operation.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/operation/ListenComplete.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/operation/Overwrite.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/operation/Merge.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/CacheNode.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/EventGenerator.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/ViewCache.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/ImmutableTree.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/CompoundWrite.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/WriteTree.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/ViewProcessor.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/View.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/SyncPoint.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/SyncTree.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/ServerValues.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/Tree.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/validation.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/EventQueue.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/Repo.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/util/libs/parser.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/Event.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/core/view/EventRegistration.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/api/OnDisconnect.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/api/Reference_impl.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/api/Database.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/register.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/api/ServerValue.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/api/Transaction.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/api/test_access.ts","/Users/nageebdamani/gradey-website/node_modules/@firebase/database/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * This function was added to support non-listener queries,\n * specifically for use in repoGetValue. It sets up all the same\n * local cache data-structures (SyncPoint + View) that are\n * needed for listeners without installing an event registration.\n * If `query` is not `loadsAllData`, it will also provision a tag for\n * the query so that query results can be merged into the sync\n * tree using existing logic for tagged listener queries.\n *\n * @param syncTree - Synctree to add the query to.\n * @param query - Query to register\n * @returns tag as a string if query is not a default query, null if query is not.\n */\nexport function syncTreeRegisterQuery(syncTree: SyncTree, query: QueryContext) {\n  const { syncPoint, serverCache, writesCache, serverCacheComplete } =\n    syncTreeRegisterSyncPoint(query, syncTree);\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  if (!query._queryParams.loadsAllData()) {\n    return syncTreeTagForQuery_(syncTree, query);\n  }\n  return null;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Creates a new syncpoint for a query and creates a tag if the view doesn't exist.\n * Extracted from addEventRegistration to allow `repoGetValue` to properly set up the SyncTree\n * without actually listening on a query.\n */\nexport function syncTreeRegisterSyncPoint(\n  query: QueryContext,\n  syncTree: SyncTree\n) {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  return {\n    syncPoint,\n    writesCache,\n    serverCache,\n    serverCacheComplete,\n    foundAncestorDefaultView,\n    viewAlreadyExists\n  };\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const {\n    syncPoint,\n    serverCache,\n    writesCache,\n    serverCacheComplete,\n    viewAlreadyExists,\n    foundAncestorDefaultView\n  } = syncTreeRegisterSyncPoint(query, syncTree);\n\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeRegisterQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      // if this is a filtered query, then overwrite at path\n      if (query._queryParams.loadsAllData()) {\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n      } else {\n        // Simulate `syncTreeAddEventRegistration` without events/listener setup.\n        // We do this (along with the syncTreeRemoveEventRegistration` below) so that\n        // `repoGetValue` results have the same cache effects as initial listener(s)\n        // updates.\n        const tag = syncTreeRegisterQuery(repo.serverSyncTree_, query);\n        syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n        // Call `syncTreeRemoveEventRegistration` with a null event registration, since there is none.\n        // Note: The below code essentially unregisters the query and cleans up any views/syncpoints temporarily created above.\n      }\n      const cancels = syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        null\n      );\n      if (cancels.length > 0) {\n        repoLog(repo, 'unexpected cancel events in repoGetValue');\n      }\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}